@using EA.Prsd.Core.Web.Mvc.RazorHelpers
@using EA.Weee.Core.DataStandards
@using EA.Weee.Core.Shared
@using EA.Weee.Web.Areas.Admin.Controllers
@using EA.Weee.Web.RazorHelpers
@using MvcNavigationHelpers
@model EA.Weee.Web.Areas.Admin.ViewModels.Scheme.SchemeViewModel
@{
    ViewBag.Title = "Edit PCS";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.IsChangeableStatus)
    @Html.HiddenFor(m => m.OrganisationId)
    @Html.HiddenFor(m => m.SchemeId)

    <div class="grid-row">
        <div class="column-two-thirds">
            <header class="hgroup">
                <h1 class="heading-large">Edit PCS</h1>
            </header>
        </div>
    </div>

    @Html.Gds().ValidationSummary()

    if (Model.IsChangeableStatus)
    {
    <div class="form-group @Html.Gds().FormGroupClass(m => m.SchemeName)">
        @Html.Gds().LabelFor(m => m.SchemeName)
        @Html.Gds().ValidationMessageFor(m => m.SchemeName)
        @Html.Gds().TextBoxFor(m => m.SchemeName, new { @maxlength = EnvironmentAgencyMaxFieldLengths.SchemeName })
    </div>
    <div class="form-group @Html.Gds().FormGroupClass(m => m.ApprovalNumber)">
        @Html.Gds().LabelFor(m => m.ApprovalNumber)
        @Html.Gds().ValidationMessageFor(m => m.ApprovalNumber)
        @Html.Gds().TextBoxFor(m => m.ApprovalNumber, new { @maxlength = EnvironmentAgencyMaxFieldLengths.SchemeApprovalNumber })
    </div>
    <div class="form-group @Html.Gds().FormGroupClass(m => m.IbisCustomerReference)">
        @Html.Gds().LabelFor(m => m.IbisCustomerReference)
        @Html.Gds().ValidationMessageFor(m => m.IbisCustomerReference)
        @Html.Gds().TextBoxFor(m => m.IbisCustomerReference, new { @maxlength = EnvironmentAgencyMaxFieldLengths.IbisBillingReference })
    </div>
    <div class="form-group @Html.Gds().FormGroupClass(m => m.ObligationType)">
        @Html.Gds().LabelFor(m => m.ObligationType)
        @Html.Gds().ValidationMessageFor(m => m.ObligationType)
        @Html.Gds().DropDownListFor(m => m.ObligationType, Model.ObligationTypeSelectList, string.Empty, new { autocomplete = "false" })
    </div>
    <div class="form-group @Html.Gds().FormGroupClass(m => m.CompetentAuthorityId)">
        @Html.Gds().LabelFor(m => m.CompetentAuthorityId)
        @Html.Gds().ValidationMessageFor(m => m.CompetentAuthorityId)
        @Html.Gds().DropDownListFor(m => m.CompetentAuthorityId, new SelectList(Model.CompetentAuthorities, "Id", "Abbreviation"), string.Empty, new { autocomplete = "false" })
    </div>
    }
    <div class="form-group @Html.Gds().FormGroupClass(m => m.Status)">
        @Html.Gds().LabelFor(m => m.Status)
        @Html.Gds().ValidationMessageFor(m => m.Status)
        @if (!Model.IsChangeableStatus)
        {
            <select class="form-control" disabled="disabled">
                <option>@Model.Status</option>
            </select>
            @Html.HiddenFor(m => m.Status)
        }
        else
        {
            @Html.Gds().DropDownListFor(m => m.Status, Model.StatusSelectList)
        }
    </div>

    if (Model.IsChangeableStatus)
    {
        @(this.WeeeGds().Submit("Save and Continue", new { @class = "button" }))
    }
    <p>
        <a href="@(Url.UrlFor<SchemeController>(a => a.Overview(Model.SchemeId, null)))">Back</a>
    </p>
    }


@section scripts {
    <script>
        $("#Status").change(function () {
            if ($(this).val() === "3") /* Rejected status */ {
                document.forms[1].submit(); // Submit the form immediately
            }

            if ($(this).val() === "4") /* Withdrawn status */ {
                document.forms[1].submit(); // Submit the form immediately
            }
        });
    </script>
    }
