@using EA.Prsd.Core.Web.Mvc.RazorHelpers
@using EA.Weee.Core.Admin
@using EA.Weee.Requests.Admin
@using EA.Weee.Web.Areas.Admin.Controllers
@using EA.Weee.Web.Infrastructure.Paging
@using EA.Weee.Web.RazorHelpers
@using MvcNavigationHelpers
@model EA.Weee.Web.Areas.Admin.ViewModels.User.ManageUsersViewModel
@{
    ViewBag.Title = "Choose Users";
}

@section scripts{
    <script>
        $('#idManageUsersTable tr').click(function () {
            $(this).find('td input[type=radio]').prop('checked', true);
        })
    </script>
}
<header class="hgroup">
    <h1 class="govuk-heading-l">
        Choose a user
    </h1>
</header>

@using (Html.BeginForm(actionName: "ApplyFilter", controllerName: "Aatf", method: FormMethod.Post))
{
    <div class="filter">
        @Html.AntiForgeryToken()
        <div class="govuk-label">Filter by:</div>
        <br />
        <table class="govuk-table">
            <tbody class="govuk-table__body">
                <tr class="govuk-table__row">
                    <td>
                        @Html.Gds().LabelFor(m => m.Filter.Name, false)
                        @Html.TextBoxFor(m => m.Filter.Name, new { @class = "govuk-!-width-three-quarters form-control govuk-input" })
                    </td>
                    <td>
                        @Html.Gds().LabelFor(m => m.Filter.OrganisationName, false)
                        @Html.TextBoxFor(m => m.Filter.OrganisationName, new { @class = "govuk-!-width-three-quarters form-control govuk-input" })
                    </td>
                </tr>
                <tr class="govuk-table__row">
                    <td>
                        @Html.Gds().LabelFor(m => m.Filter.Status, false)
                        @Html.EnumDropDownListFor(model => model.Filter.Status, new { @class = "govuk-!-width-three-quarters form-control govuk-input" })
                    </td>
                    <td>
                    </td>
                </tr>
            </tbody>
        </table>

        @(this.WeeeGds().Submit("Apply"))
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Filter.Name)
    @Html.HiddenFor(m => m.Filter.OrganisationName)
    @Html.HiddenFor(m => m.Filter.Status)
    @Html.Gds().ValidationSummary()
    <div class="table-hr"></div>
    <table id="idManageUsersTable" class="prsd-table hover-effect govuk-table">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                @switch (@Model.OrderBy)
                {
                    case FindMatchingUsers.OrderBy.FullNameAscending:
                        <th class="sorted-ascending govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.FullNameDescending })">Name</a>
                            <span class="govuk-visually-hidden">Sorted alphabetically from A to Z.</span>
                        </th>
                        break;

                    case FindMatchingUsers.OrderBy.FullNameDescending:
                        <th class="sorted-descending govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.FullNameAscending })">Name</a>
                            <span class="govuk-visually-hidden">Sorted alphabetically from Z to A.</span>
                        </th>
                        break;

                    default:
                        <th class="govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.FullNameAscending })">Name</a>
                        </th>
                        break;
                }
                <th class="govuk-table__header">
                    Email
                </th>
                @switch (@Model.OrderBy)
                {
                    case FindMatchingUsers.OrderBy.OrganisationAscending:
                        <th class="sorted-ascending govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.OrganisationDescending })">Organisation</a>
                            <span class="govuk-visually-hidden">Sorted alphabetically from A to Z.</span>
                        </th>
                        break;

                    case FindMatchingUsers.OrderBy.OrganisationDescending:
                        <th class="sorted-descending govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.OrganisationAscending })">Organisation</a>
                            <span class="govuk-visually-hidden">Sorted alphabetically from Z to A.</span>
                        </th>
                        break;

                    default:
                        <th class="govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.OrganisationAscending })">Organisation</a>
                        </th>
                        break;
                }
                @switch (@Model.OrderBy)
                {
                    case FindMatchingUsers.OrderBy.RoleAscending:
                        <th class="sorted-ascending govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.RoleDescending })">Role</a>
                            <span class="govuk-visually-hidden">Sorted with the lowest rank role first.</span>
                        </th>
                        break;

                    case FindMatchingUsers.OrderBy.RoleDescending:
                        <th class="sorted-descending govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.RoleAscending })">Role</a>
                            <span class="govuk-visually-hidden">Sorted with the highest rank role first.</span>
                        </th>
                        break;

                    default:
                        <th class="govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.RoleDescending })">Role</a>
                        </th>
                        break;
                }
                @switch (@Model.OrderBy)
                {
                    case FindMatchingUsers.OrderBy.StatusAscending:
                        <th class="sorted-ascending govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.StatusDescending })">Status</a>
                            <span class="govuk-visually-hidden">Sorted alphabetically from A to Z.</span>
                        </th>
                        break;

                    case FindMatchingUsers.OrderBy.StatusDescending:
                        <th class="sorted-descending govuk-table__header">
                            <a href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.StatusAscending })">Status</a>
                            <span class="govuk-visually-hidden">Sorted alphabetically from Z to A.</span>
                        </th>
                        break;

                    default:
                        <th class="govuk-table__header">
                            <a class="govuk-link govuk-link--no-visited-state" href="@Url.Action("Index", new { OrderBy = FindMatchingUsers.OrderBy.StatusAscending })">Status</a>
                        </th>
                        break;
                }
                <th class="govuk-table__header" style="padding-right: 15px">Select</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            @foreach (UserSearchData user in Model.Users)
            {
                <tr class="govuk-table__row">
                    <td class="govuk-table__cell">@user.FullName</td>
                    <td class="govuk-table__cell break-word">@user.Email</td>
                    <td class="govuk-table__cell">@user.OrganisationName</td>
                    <td class="govuk-table__cell">@user.Role</td>
                    <td class="govuk-table__cell">@user.Status</td>
                    <td class="govuk-table__cell">
                        @Html.RadioButtonFor(m => m.SelectedUserId, @user.OrganisationUserId)
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <br />

    if (@Model.Users.PageCount > 1)
    {
        <div class="pager govuk-body">
            @Html.Pager(Model.Users.PageSize, Model.Users.PageNumber, Model.Users.TotalItemCount).Options(o =>
                o.AddRouteValue("orderby", @Model.OrderBy))
        </div>

        <p class="govuk-body">Showing @Model.Users.ItemStart - @Model.Users.ItemEnd of @Model.Users.TotalItemCount</p>
    }

    @(this.WeeeGds().Submit("Continue"))

    <p>
        <a href="@(Url.UrlFor<HomeController>(a => a.ChooseActivity()))">Back</a>
    </p>
}

