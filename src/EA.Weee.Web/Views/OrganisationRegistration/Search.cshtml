@using EA.Weee.Core.DataStandards
@model EA.Weee.Web.ViewModels.OrganisationRegistration.SearchViewModel
@{
    ViewBag.Title = "Search Organisation";
}
@section main_content
{
    <header class="hgroup">
        <h1 class="govuk-heading-l">Add your organisation</h1>
    </header>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.Gds().ValidationSummary()
        
        @Html.HiddenFor(m => m.SelectedOrganisationId);
        
        <p>
            Search for your registered company, partnership or sole trader name. If it is not listed, create a new organisation.
        </p>

        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.SearchTerm) form-search">
            @Html.Gds().LabelFor(m => m.SearchTerm, new { @class = "govuk-visually-hidden" })
            @Html.Gds().ValidationMessageFor(m => m.SearchTerm)
            @Html.Gds().TextBoxFor(m => m.SearchTerm, new { @class = "govuk-!-width-one-half", @maxLength = CommonMaxFieldLengths.DefaultString }) <!-- SG Change, form control forces 50% width -->
            <button type="submit" class="govuk-button">
                <img src="@Url.Content("~/Content/govuk_toolkit/images/icon-search.png")" alt="Search"/>
            </button>
        </div>

        if (Model.ShowPerformAnotherActivityLink)
        {
            <p>
                @Html.ActionLink("Perform another activity", "Index", "Organisation")
            </p>
        }
    }
}

@section scripts {
    <script type="text/javascript">

        @*  When a uer selects an item from the autocomplete, the ID is stored in the hidden input
            called "SelectedOrganisationId". If the user changes the value of the search term
            after making a selected, we need to clear this hidden value.

            To do this, we cannot use the change event because FireFox fires this event
            after the autocomplete's select event completes. This clears the value immediately
            after it is set.

            To avoid this, we can store the original search term in a variable and use the focus
            and blur events to check for a change. The variable is updated by the autocomplete
            select event to avoid the value being cleared after a selection is made.
        *@
        var searchTerm = '';

        $("#SearchTerm")
            .focus(function () { searchTerm = $(this).val(); })
            .blur(function () { if (searchTerm != $(this).val()) { $("#SelectedOrganisationId").val(""); } })
            .autocomplete({
                source: function (request, response) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("FetchSearchResultsJson")",
                        context: document.body,
                        data: { SearchTerm: request.term, __RequestVerificationToken: $("[name=__RequestVerificationToken]").val() },
                        success: function (data) {
                            response($.map(data, function (item) { return item }))
                        }
                    });
                },
                minLength: 1,
                select: function (event, ui) {
                    $("#SearchTerm").val(ui.item.Name);
                    $("#SelectedOrganisationId").val(ui.item.OrganisationId);
                    searchTerm = $("#SearchTerm").val();
                    return false;
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    // Do nothing.
                },
                disabled: window.innerWidth <= 640
            }).autocomplete("instance")._renderItem = function (ul, item) {
                return $("<li></li>")
                    .data("item.autocomplete", item)
                    .append("<span>" + item.Name + "</span>")
                    .appendTo(ul);
            };

        $(window).resize(function () {
            $("#SearchTerm").autocomplete("option", "disabled", window.innerWidth <= 640);
        });

    </script>
}

